{"version":3,"sources":["click1.wav","click2.wav","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","playing","count","bpm","beatsPerMeasure","click1","Audio","click2","startStop","clearInterval","timer","setState","setInterval","playClick","play","handleBpmChange","e","target","value","this","className","type","min","max","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,8NC8E5BC,G,iNAxEbC,MAAQ,CACNC,SAAS,EACTC,MAAO,EACPC,IAAK,IACLC,gBAAiB,G,EAGnBC,OAAS,IAAIC,MAAMD,K,EACnBE,OAAS,IAAID,MAAMC,K,EAEnBC,UAAY,WACP,EAAKR,MAAMC,SACZQ,cAAc,EAAKC,OACnB,EAAKC,SAAS,CAAEV,SAAS,MAGzB,EAAKS,MAAQE,YAAY,EAAKC,UAAY,GAAK,EAAKb,MAAMG,IAAO,KACjE,EAAKQ,SAAS,CACZT,MAAO,EACPD,SAAS,GAEX,EAAKY,a,EAKTA,UAAY,WAAO,IAAD,EACmB,EAAKb,MADxB,EACRE,MADQ,EACDE,kBAGiB,EAC9B,EAAKG,OAAOO,OAEZ,EAAKT,OAAOS,OAId,EAAKH,UAAS,SAAAX,GAAK,MAAK,CACtBE,OAAQF,EAAME,MAAQ,GAAKF,EAAMI,qB,EAIrCW,gBAAkB,SAAAC,GAChB,IAAMb,EAAMa,EAAEC,OAAOC,MAClB,EAAKlB,MAAMC,SACZQ,cAAc,EAAKC,OACnB,EAAKA,MAAQE,YAAY,EAAKC,UAAY,GAAKV,EAAO,KAEtD,EAAKQ,SAAS,CACZT,MAAO,EACPC,SAIF,EAAKQ,SAAS,CAAER,S,wEAIV,IAAD,EACkBgB,KAAKnB,MAAtBC,EADD,EACCA,QAASE,EADV,EACUA,IACjB,OACE,yBAAKiB,UAAU,OACb,yBAAKA,UAAU,cACb,6BAAMjB,EAAN,QACA,2BAAOkB,KAAK,QAAQC,IAAI,KAAKC,IAAI,MAAML,MAAOf,EAAKqB,SAAUL,KAAKJ,mBAExE,4BAAQU,QAASN,KAAKX,WAAYP,EAAU,OAAS,c,GAnEvCyB,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b5882d0f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click1.7a7930a2.wav\";","module.exports = __webpack_public_path__ + \"static/media/click2.fe0ded65.wav\";","import React, { Component } from 'react';\nimport click1 from './click1.wav'\nimport click2 from './click2.wav'\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    playing: false,\n    count: 0,\n    bpm: 100,\n    beatsPerMeasure: 4\n  }\n\n  click1 = new Audio(click1)\n  click2 = new Audio(click2)\n\n  startStop = () => {\n    if(this.state.playing) {\n      clearInterval(this.timer)\n      this.setState({ playing: false })\n    }\n    else {\n      this.timer = setInterval(this.playClick, (60 / this.state.bpm) * 1000)\n      this.setState({\n        count: 0,\n        playing: true\n      },\n      this.playClick\n      )\n    }\n  }\n\n  playClick = () => {\n    const { count, beatsPerMeasure } = this.state;\n\n    // The first beat will have a different sound than the others\n    if (count % beatsPerMeasure === 0) {\n      this.click2.play();\n    } else {\n      this.click1.play();\n    }\n\n    // Keep track of which beat we're on\n    this.setState(state => ({\n      count: (state.count + 1) % state.beatsPerMeasure\n    }));\n  };\n\n  handleBpmChange = e => {\n    const bpm = e.target.value\n    if(this.state.playing) {\n      clearInterval(this.timer)\n      this.timer = setInterval(this.playClick, (60 / bpm) * 1000)\n\n      this.setState({\n        count: 0,\n        bpm\n      })\n    }\n    else {\n      this.setState({ bpm })\n    }\n  }\n\n  render() {\n    const { playing, bpm } = this.state\n    return (\n      <div className='App'>\n        <div className='bpm-slider'>\n          <div>{bpm} BPM</div>\n          <input type='range' min='60' max='240' value={bpm} onChange={this.handleBpmChange}></input>\n        </div>\n    <button onClick={this.startStop}>{playing ? 'Stop' : 'Start'}</button>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}